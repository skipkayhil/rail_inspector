#!/usr/bin/env ruby

require "pathname"
require "strscan"

RAILS_PATH = Pathname.new(ARGV.first)
CHANGELOG_PATHS = Dir[RAILS_PATH.join("*/CHANGELOG.md")]

class ChangelogEntry
  attr_reader :path, :header, :description, :authors

  def initialize(path, header, description, authors)
    @path = path
    @header = header
    @description = description
    @authors = authors
  end

  def valid?
    return false unless @header
    return false unless @authors

    true
  end

  def to_s
    entry = header
    entry += (description + "\n\n") if description
    entry += (authors || "FIXME") + "\n\n"
    entry
  end
end

class ChangelogParser
  def self.call(path)
    new(path).parse
  end

  def self.to_proc
    method(:call).to_proc
  end

  attr_reader :path, :entries

  def initialize(path)
    @path = path
    @buffer = StringScanner.new(File.read(path))
    @entries = []
  end

  def parse
    until @buffer.eos?
      skip_whitespace
      parse_entry_or_footer
    end

    entries
  end

  def parse_entry_or_footer
    peek_footer? ? parse_footer : parse_entry
  end

  def parse_entry
    sections = []

    begin
      sections << @buffer.scan_until(/\n{2,}/)
    end while @buffer.peek(1) != "*" && !peek_footer?

    header = sections.shift if sections.first&.start_with?(/^\*/)
    authors = sections.pop if sections.last&.match?(
      /^\s+\*[\D\S]+(\s[\D\S]+)*\*/
    )
    sections = (sections.empty? ? nil : sections.join("\n\n"))
    @entries << ChangelogEntry.new(path, header, sections, authors)
  end

  FOOTER_TEXT = "Please check"

  def parse_footer
    @buffer.scan(
      /#{FOOTER_TEXT} \[\d-\d-stable\]\(.*\) for previous changes\.\n/
    )
  end

  def peek_footer?
    @buffer.peek(FOOTER_TEXT.length) == FOOTER_TEXT
  end

  def skip_whitespace
    @buffer.skip(/\s+/)
  end
end

changelogs = CHANGELOG_PATHS.map(&ChangelogParser)

errors =
  changelogs.flat_map do |entries|
    invalid_entries = entries.reject(&:valid?)

    output = invalid_entries.empty? ? "." : "F"
    $stdout.write(output)

    invalid_entries
  end

$stdout.write("\n\n")

unless errors.empty?
  puts "Offenses:\n\n"

  errors.each do |e|
    puts e.path
    puts e
  end
end

puts "#{changelogs.length} changelogs inspected, #{errors.length} offense#{"s" unless errors.length == 1} detected"
exit errors.empty?
