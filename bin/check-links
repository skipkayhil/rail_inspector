#!/usr/bin/env ruby

$:.unshift(File.expand_path("../lib", __dir__))
require "pathname"
require "uri"

RAILS_PATH = Pathname.new(ARGV.first)
FILE_PATHS = Dir.chdir(RAILS_PATH) { `git ls-files -z`.split("\x0") }

all_uris =
  FILE_PATHS
    .filter_map do |path|
      next unless %w[rb md].include? path.split(".").last

      file = RAILS_PATH.join(path).read

      URI.extract(file).select { _1.include? ":/" }
    end
    .flatten
    .uniq
    .sort

module EdgeLinter
  API = "edgeapi"
  GUIDES = "edgeguides"

  ALLOWLIST = %w[
    https://edgeapi.rubyonrails.org
    https://edgeapi.rubyonrails.org/classes/ActionDispatch/Response.html
    https://edgeguides.rubyonrails.org/)
    https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)
    https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation).
    https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case)
    https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report))
    https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#reporting-an-issue).
    https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html)
  ]

  class << self
    def call(uri)
      return if ALLOWLIST.include? uri
      return unless uri.include? API or uri.include? GUIDES

      puts uri
    end
  end
end

all_uris.each { |uri| EdgeLinter.call(uri) }
