#!/usr/bin/env ruby

$:.unshift(File.expand_path("../lib", __dir__))
require "bundler/setup"
require "syntax_tree"

require "visitor/framework_default"

class RailsFileEditor
  def initialize(rails_path)
    @rails_path = Pathname.new(rails_path)
  end

  def parse(relative_path)
    file = read(relative_path)
    SyntaxTree.parse(file)
  end

  def read(relative_path)
    path = rails_path.join(relative_path)
    SyntaxTree.read(path)
  end

  def write(relative_path, content)
    path = rails_path.join(relative_path)
    File.write(path, content)
  end

  private

  attr_reader :rails_path
end

EDITOR = RailsFileEditor.new(ARGV.first)

APPLICATION_CONFIGURATION_PATH =
  "railties/lib/rails/application/configuration.rb"
CONFIGURING_DOC_PATH = "guides/source/configuring.md"

application_configuration_tree = EDITOR.parse(APPLICATION_CONFIGURATION_PATH)

visitor = Visitor::FrameworkDefault.new
visitor.visit(application_configuration_tree)

configuring_raw = EDITOR.read(CONFIGURING_DOC_PATH)

before, versioned_defaults_section, after =
  configuring_raw
    .split("\n")
    .slice_when do |_, next_line|
      [
        "### Versioned Default Values",
        "### Rails General Configuration"
      ].include?(next_line)
    end
    .to_a

versioned_defaults_header, *version_defaults =
  versioned_defaults_section
    .slice_when { |_, next_line| next_line.start_with?("####") }
    .to_a

generated_defaults =
  version_defaults.map do |defaults|
    header, configs = defaults[0], defaults[2, defaults.length - 3]

    version = header.match(/\d\.\d/)[0]

    generated_doc =
      visitor.config_map[version].map do |config, value|
        full_config =
          case config
          when /^[A-Z]/
            config
          when /^self/
            config.sub("self", "config")
          else
            "config.#{config}"
          end

        # TODO: bad fallback until I have a better solution for stringifiying
        # HashLiteral ast and multiline string ast
        value_with_fallback =
          if value.nil?
            configs.find { |c| c.include?(full_config) }.match(/ `(.*)`$/)[1]
          else
            value
          end

        "- [`#{full_config}`](##{full_config.tr("._", "-").downcase}): `#{value_with_fallback}`"
      end

    [header, "", *generated_doc.sort, ""]
  end

content_array =
  before + versioned_defaults_header + generated_defaults.flatten + after
content = content_array.join("\n") + "\n"
# Uncomment to write changes
# EDITOR.write(CONFIGURING_DOC_PATH, content)
