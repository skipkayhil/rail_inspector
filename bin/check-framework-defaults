#!/usr/bin/env ruby

$:.unshift(File.expand_path("../lib", __dir__))
require "bundler/setup"

require "configuring"
require "visitor/framework_default"

checker = Configuring.new(ARGV.first)

application_configuration_tree =
  checker.parser.call(checker.resolver.call(:app_config))

visitor = Visitor::FrameworkDefault.new
visitor.visit(application_configuration_tree)

versioned_defaults_header, *version_defaults =
  checker
    .doc
    .versioned_defaults
    .slice_when { |_, next_line| next_line.start_with?("####") }
    .to_a

generated_defaults =
  version_defaults.map do |defaults|
    header, configs = defaults[0], defaults[2, defaults.length - 3]

    version = header.match(/\d\.\d/)[0]

    generated_doc =
      visitor.config_map[version].map do |config, value|
        full_config =
          case config
          when /^[A-Z]/
            config
          when /^self/
            config.sub("self", "config")
          else
            "config.#{config}"
          end

        # TODO: bad fallback until I have a better solution for stringifiying
        # HashLiteral ast and multiline string ast
        value_with_fallback =
          if value.nil?
            configs.find { |c| c.include?(full_config) }.match(/ `(.*)`$/)[1]
          else
            value
          end

        "- [`#{full_config}`](##{full_config.tr("._", "-").downcase}): `#{value_with_fallback}`"
      end

    [header, "", *generated_doc.sort, ""]
  end

checker.doc.versioned_defaults =
  versioned_defaults_header + generated_defaults.flatten

# Uncomment to write changes
File.write(checker.resolver.call(:doc), checker.doc.to_s)
